def type(architecture)
	from implementations.$library.architecture.architecture import $library+FirstUppercase~Architecture as Architecture
	$import

    architecture = (Architecture("$name")
                        $component...[$NL])
end

def type(import)
    $section+import...[$NL]
    $block+import...[$NL]
    $layer+import...[$NL]
end

def type(component) attribute(section)
    .attach($section)
end

def type(component) attribute(layer)
    .attach($layer)
end

def type(section) trigger(import)
    from implementations.$library.architecture.sections.$type+SnakeCase import $library+FirstUppercase~$type+CamelCase~Section as $type+CamelCase~Section
end

def type(block) trigger(import) attribute(type)
    from implementations.$library.architecture.blocks.$type+SnakeCase import $library+FirstUppercase~$type+CamelCase~Block as $type+CamelCase~Block
end

def type(block) trigger(import)
    from implementations.$library.architecture.block import $library+FirstUppercase~Block as Block
end

def type(layer) trigger(import) attribute(package) attribute(dimensionality)
    from implementations.$library.architecture.layers.$package.$type+SnakeCase import $library+FirstUppercase~$dimensionality~Dimensional~$type+CamelCase~Layer as $type+CamelCase~Layer
end

def type(layer) trigger(import) attribute(package) attribute(reduce)
    from implementations.$library.architecture.layers.$package.$type+SnakeCase import $library+FirstUppercase~$type+CamelCase~Layer as $type+CamelCase~Layer
    $reduce+import...[]
end

def type(layer) trigger(import) attribute(package)
    from implementations.$library.architecture.layers.$package.$type+SnakeCase import $library+FirstUppercase~$type+CamelCase~Layer as $type+CamelCase~Layer
end

def type(layer) trigger(import) attribute(dimensionality)
    from implementations.$library.architecture.layers.$type+SnakeCase import $library+FirstUppercase~$dimensionality~Dimensional~$type+CamelCase~Layer as $type+CamelCase~Layer
end

def type(layer) trigger(import)
    from implementations.$library.architecture.layers.$type+SnakeCase import $library+FirstUppercase~$type+CamelCase~Layer as $type+CamelCase~Layer
end

def type(reduce) trigger(import) attribute(slicing)
    from implementations.$library.architecture.layers.recurrent import $library+FirstUppercase~SlicingLayer as SlicingLayer
end

def type(reduce) trigger(import) attribute(linear)
end

def type(reduce) trigger(import) attribute(flatten)
end

def type(section)
    $type+CamelCase~Section($[
                $block...[, $NL]
    $])
end

def type(block) attribute(type)
    $type+CamelCase~Block($[
        $layer...[, $NL]
    $])
end

def type(block)
    Block($[
        $layer...[, $NL]
    $])
end

def type(kernel | stride | padding)
    ($dimension...[, ])
end

def type(Linear) type(layer)
    $type+CamelCase~Layer(in_features=$in_features, out_features=$out_features, dimension=$dimension, bias=$bias)
end

def type(Convolutional) type(layer)
    $type+CamelCase~Layer(in_channels=$in_channels, out_channels=$out_channels, kernel=$kernel, stride=$stride, padding=$padding)
end

def type(MaxPool | AvgPool) type(layer)
    $type+CamelCase~Layer(kernel=$kernel, stride=$stride, padding=$padding)
end

def type(LSTM | RNN | GRU) type(layer)
    $type+CamelCase~Layer(input_size=$input, hidden_size=$hidden, num_layer=$num_layers, bidirectional=$bidirectional+FirstUpperCase, dropout=$dropout),
    $reduce...[, $NL]
end

def type(reduce) attribute(slicing)
    SlicingLayer(output=SlicingLayer.OutputType.$output, start=$from, end=$to)
end

def type(reduce) attribute(linear)
    LinearLayer(in_features=$in_features, out_features=$out_features, dimension=$dimension, bias=$bias)
end

def type(reduce) attribute(flatten)
    FlattenLayer(from_dim=$from, to_dim=$to)
end

def type(ELU) type(layer)
    $type+CamelCase~Layer(alpha=$alpha)
end

def type(LeakyReLU) type(layer)
    $type+CamelCase~Layer(negative_slope=$slope)
end

def type(Softmax) type(layer)
    $type+CamelCase~Layer(n_dimensions=$n_dimensions)
end

def type(BatchNormalization) type(layer)
    $type+CamelCase~Layer(num_features=$num_features, eps=$eps, momentum=$momentum)
end

def type(LayerNormalization) type(layer)
    $type+CamelCase~Layer(normalized_shape=$shape, eps=$eps)
end

def type(Dropout) type(layer)
    $type+CamelCase~Layer(probability=$probability)
end

def type(Flatten) type(layer)
    $type+CamelCase~Layer(from_dim=$from_dim, to_dim=$to_dim)
end

def type(layer)
    $type+CamelCase~Layer()
end