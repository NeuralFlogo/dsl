def type(architecture)
	from implementations.$library.architecture.architecture import $library+FirstUppercase~Architecture as Architecture
	$import...[$NL]

    architecture = (Architecture("$name")
                        .attach($component)
end

def type(import)
    $section+import...[$NL]
    $block+import...[$NL]
    $layer+import...[$NL]
end

def type(architecture)
    $section...[,$NL]
end

def type(section) trigger(import)
    from implementations.$library.architecture.sections.$type+Lowercase import $library+FirstUppercase~$type+CamelCase~Section as $type+CamelCase~Section
end

def type(section)
    $type+CamelCase~Section($[
        $block...[, $NL]
    $])
end

def type(block) trigger(import)
    from implementations.$library.architecture.blocks.$type+Lowercase import $library+FirstUppercase~$type+CamelCase~Block as $type+CamelCase
end

def type(block)
    $type+CamelCase~Block($[
        $layer...[, $NL]
    $])
end

def type(layer) trigger(import) attribute(package)
    from implementations.$library.architecture.layers.$package.$type+Lowercase import $library+FirstUppercase~$type~Layer as $type~Layer
end

def type(layer) trigger(import)
    from implementations.$library.architecture.layers.$type+Lowercase import $library+FirstUppercase~$type~Layer as $type~Layer
end

def type(Linear) type(layer)
    $type~Layer(in_features=$in_features, out_features=$out_features, bias=$bias)
end

def type(Convolutional) type(layer)
    $type~Layer(in_channels=$in_channels, out_channels=$out_channels, kernel=$kernel, stride=$stride, padding=$padding)
end

def type(MaxPool | AvgPool) type(layer)
    $type~Layer(kernel_size=$kernel_size, stride=$stride, padding=$padding)
end

def type(Normalization) type(layer)
    $type~Layer(num_features=$num_features, eps=$eps, momentum=$momentum)
end

def type(Dropout) type(layer)
    $type~Layer(probability=$probability)
end

def type(Softmax) type(layer)
    $type~Layer(n_dimensions=$n_dimensions)
end

def type(layer)
    $type~Layer()
end